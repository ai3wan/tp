# handlers/profile.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

import database as db
import keyboards.reply as rkb
import keyboards.inline as ikb
from FSM.states import ResetProgress
from handlers.course_flow import show_main_menu

router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ ---
def create_progress_bar(completed: int, total: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä. –ü—Ä–∏–º–µ—Ä: [üü©üü©üü©‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è]"""
    progress_percent = int((completed / total) * 10)
    return "üü©" * progress_percent + "‚¨úÔ∏è" * (10 - progress_percent)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –ø—É–ª—å—Å–æ–≤ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ ---
async def get_all_assessments_display(user_id: int, course_id: int) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –ø—É–ª—å—Å–æ–≤ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏."""
    import asyncpg
    conn = await asyncpg.connect(db.DATABASE_URL)
    try:
        db_user_id = await conn.fetchval("SELECT id FROM users WHERE telegram_id = $1", user_id)
        if not db_user_id:
            return ["üîò –ü—É–ª—å—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"]
            
        sql = """
            SELECT assessment_type, score, self_assessment_score FROM assessment_results
            WHERE user_id = $1 AND course_id = $2
            ORDER BY assessment_type;
        """
        results = await conn.fetch(sql, db_user_id, course_id)
        
        if not results:
            return ["üîò –ü—É–ª—å—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"]
        
        assessments = []
        for result in results:
            assessment_type = result['assessment_type']
            score = result['score']
            self_assessment = result['self_assessment_score']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ —É—Ä–æ–≤–Ω—é —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏
            if 0 <= score <= 13:
                indicator = "üü¢"  # –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
            elif 14 <= score <= 26:
                indicator = "üü°"  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
            else:
                indicator = "üî¥"  # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
            if assessment_type == 'initial':
                test_name = "–ü—É–ª—å—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ –∫—É—Ä—Å–∞"
            elif assessment_type == 'intermediate':
                test_name = "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—É–ª—å—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"
            elif assessment_type == 'final':
                test_name = "–ü—É–ª—å—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞"
            else:
                test_name = f"–ü—É–ª—å—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ ({assessment_type})"
            
            assessments.append(f"{indicator} {test_name}: {score}/42 –±–∞–ª–ª–æ–≤ (—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞: {self_assessment}/10)")
        
        return assessments
        
    finally:
        await conn.close()


# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" ---
@router.message(F.text == "üôç –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    user_id = message.from_user.id
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    start_date = await db.get_user_start_date(user_id)
    all_courses_progress = await db.get_all_courses_progress(user_id)
    
    # 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø—É–ª—å—Å–æ–≤ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏
    assessments_display = await get_all_assessments_display(user_id, 1)  # –ö—É—Ä—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ (ID = 1)
    
    # 3. –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–∫–∏
    total_modules_count = 0
    active_courses_text = []
    completed_courses_list = []

    for course in all_courses_progress:
        total_modules_count += course['modules_completed']
        # –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω–æ 42 –º–æ–¥—É–ª—è (14 –¥–Ω–µ–π * 3 –º–æ–¥—É–ª—è)
        if course['modules_completed'] >= 42:
            completed_courses_list.append(course)
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–æ –∫—É—Ä—Å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω - –æ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π
        elif course['modules_completed'] > 0:
            progress_bar = create_progress_bar(course['modules_completed'], 42)
            active_courses_text.append(
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {course['modules_completed']}/42 –º–æ–¥—É–ª–µ–π\n[{progress_bar}]"
            )
            
    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    profile_text = [
        f"üë§ –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å\n",
        f"–í—ã —Å –Ω–∞–º–∏ —Å: {start_date}\n",
        "---",
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {total_modules_count}\n",
        "---"
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–ª—å—Å–æ–≤ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏
    if assessments_display:
        profile_text.append("üíì –ü—É–ª—å—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏:")
        for assessment in assessments_display:
            profile_text.append(f"‚Ä¢ {assessment}")
        profile_text.append("\n---")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞
    if active_courses_text:
        profile_text.extend(active_courses_text)

    await message.answer("\n".join(profile_text), reply_markup=rkb.profile_kb)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è ---

# --- –õ–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---

@router.message(F.text == "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def reset_progress_start(message: Message):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏."""
    all_progress = await db.get_all_courses_progress(message.from_user.id)
    courses_with_progress = [c for c in all_progress if c['modules_completed'] > 0]

    if not courses_with_progress:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫—É—Ä—Å—É, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å.")
        return

    # –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–±—Ä–æ—Å
    course = courses_with_progress[0]
    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É ¬´{course['emoji']} {course['title']}¬ª?\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {course['modules_completed']}/42 –º–æ–¥—É–ª–µ–π\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—Å–µ –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=ikb.get_confirm_reset_kb()
    )

@router.callback_query(F.data == "confirm_reset")
async def reset_progress_execute(callback: CallbackQuery, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫—É—Ä—Å—É —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ (ID = 1) –¥–ª—è —Å–±—Ä–æ—Å–∞
    await db.reset_progress_for_course(callback.from_user.id, 1)
    
    await state.clear()
    await callback.message.edit_text("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!")

@router.callback_query(F.data == "cancel_reset")
async def reset_progress_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    await state.clear()
    await callback.message.edit_text("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

# --- –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ---
@router.message(F.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_main_menu_from_profile(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é...", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(message, message.from_user.id)