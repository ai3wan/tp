import asyncpg
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

import database as db
import keyboards.reply as rkb
import keyboards.inline as ikb
from FSM.states import ResetProgress
from handlers.course_flow import show_main_menu

router = Router()

def create_progress_bar(completed: int, total: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä. –ü—Ä–∏–º–µ—Ä: [üü©üü©üü©‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è]"""
    progress_percent = int((completed / total) * 10)
    return "üü©" * progress_percent + "‚¨úÔ∏è" * (10 - progress_percent)

@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, pool: asyncpg.Pool):
    user_id = message.from_user.id
    
    start_date = await db.get_user_start_date(pool, user_id)
    all_courses_progress = await db.get_all_courses_progress(pool, user_id)
    
    completed_courses_count = 0
    total_modules_count = 0
    active_courses_text = []
    completed_courses_list = []

    for course in all_courses_progress:
        total_modules_count += course['modules_completed']
        if course['modules_completed'] >= 42:
            completed_courses_count += 1
            completed_courses_list.append(course)
        elif course['modules_completed'] > 0:
            progress_bar = create_progress_bar(course['modules_completed'], 42)
            active_courses_text.append(
                f"–ö—É—Ä—Å: ¬´{course['emoji']} {course['title']}¬ª\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {course['modules_completed']}/42 –º–æ–¥—É–ª–µ–π\n[{progress_bar}]"
            )
            
    profile_text = [
        f"üë§ –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å\n",
        f"–í—ã —Å –Ω–∞–º–∏ —Å: {start_date}\n",
        "---",
        "üìä –í–∞—à–∞ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
        f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {completed_courses_count}",
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {total_modules_count}\n",
        "---"
    ]

    if active_courses_text:
        profile_text.append("üéØ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã:\n")
        profile_text.extend(active_courses_text)
        profile_text.append("\n---")

    if completed_courses_list:
        profile_text.append("üèÜ –í–∞—à–∏ –∞—á–∏–≤–∫–∏ (–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã):")
        for course in completed_courses_list:
            profile_text.append(f"‚úÖ {course['title']}")
    else:
        profile_text.append("üèÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")

    await message.answer("\n".join(profile_text), reply_markup=rkb.profile_kb)

@router.message(F.text == "üìñ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã")
async def show_completed_courses(message: Message, pool: asyncpg.Pool):
    all_progress = await db.get_all_courses_progress(pool, message.from_user.id)
    completed_courses = [c for c in all_progress if c['modules_completed'] >= 42]

    if not completed_courses:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return

    await message.answer(
        "–í–æ—Ç –≤–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏:",
        reply_markup=ikb.get_courses_kb(completed_courses)
    )

@router.callback_query(F.data.startswith("select_course_"))
async def view_completed_result(callback: CallbackQuery, pool: asyncpg.Pool):
    course_id = int(callback.data.split("_")[2])
    course = await db.get_course_by_id(pool, course_id)
    await callback.message.answer(f"–ò—Ç–æ–≥–∏ –ø–æ –∫—É—Ä—Å—É ¬´{course['title']}¬ª –±—É–¥—É—Ç –∑–¥–µ—Å—å.")
    await callback.answer()

@router.message(F.text == "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def reset_progress_start(message: Message, pool: asyncpg.Pool):
    all_progress = await db.get_all_courses_progress(pool, message.from_user.id)
    courses_with_progress = [c for c in all_progress if c['modules_completed'] > 0]

    if not courses_with_progress:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")
        return

    await message.answer(
        "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–∫–æ–º—É –∫—É—Ä—Å—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å? –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=ikb.get_reset_courses_kb(courses_with_progress)
    )

@router.callback_query(F.data.startswith("reset_course_"))
async def reset_progress_confirm(callback: CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    course_id = int(callback.data.split("_")[2])
    course = await db.get_course_by_id(pool, course_id)
    
    await state.set_state(ResetProgress.confirming_reset)
    await state.update_data(course_to_reset=course_id)
    
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É ¬´{course['title']}¬ª? –í—Å–µ –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –Ω–µ–º—É –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=ikb.get_confirm_reset_kb()
    )

@router.callback_query(ResetProgress.confirming_reset, F.data == "confirm_reset")
async def reset_progress_execute(callback: CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    data = await state.get_data()
    course_id = data.get('course_to_reset')
    
    await db.reset_progress_for_course(pool, callback.from_user.id, course_id)
    
    await state.clear()
    await callback.message.edit_text("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.")

@router.callback_query(ResetProgress.confirming_reset, F.data == "cancel_reset")
async def reset_progress_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")

@router.message(F.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_main_menu_from_profile(message: Message, pool: asyncpg.Pool):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é...", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(message, message.from_user.id, pool)