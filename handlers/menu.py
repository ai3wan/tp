# handlers/menu.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

import database as db
import keyboards.inline as ikb
import keyboards.reply as rkb
from FSM.states import Onboarding, CourseSelection # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
from handlers.course_flow import show_main_menu

router = Router()

# --- –õ–æ–≥–∏–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.message(Onboarding.final, F.text.in_({"üôå –î–∞, —Ö–æ—á—É –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", "ü§î –•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –µ—Å—Ç—å"}))
async def show_courses_list_onboarding(message: Message, state: FSMContext):
    await state.clear()
    courses = await db.get_all_courses()
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –Ω–∞—à–∏ –∫—É—Ä—Å—ã. –í—ã–±–µ—Ä–∏ —Ç–æ—Ç, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=ikb.get_courses_kb(courses))

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ó–ú–ï–ù–ï–ù–ê –ó–î–ï–°–¨ ---

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Ç–µ–ø–µ—Ä—å –Ω–µ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –∫—É—Ä—Å, –∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(F.data.startswith("select_course_"))
async def course_selected_preview(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ, –≤–∫–ª—é—á–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ
    course = await db.get_course_by_id(course_id)
    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, —á—Ç–æ–±—ã "–ø–æ–º–Ω–∏—Ç—å" –µ–≥–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    await state.set_state(CourseSelection.confirming_choice)
    await state.update_data(course_id=course_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer(
        f"**{course['emoji']} {course['title']}**\n\n{course['description']}",
        parse_mode="Markdown",
        reply_markup=rkb.course_confirmation_kb
    )
    await callback.answer()
    await callback.message.delete()


# --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---

# 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä ("–û—Ç–ª–∏—á–Ω–æ, –º–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç")
@router.message(CourseSelection.confirming_choice, F.text == "‚úÖ –û—Ç–ª–∏—á–Ω–æ, –º–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç")
async def confirm_course_selection(message: Message, state: FSMContext):
    # –î–æ—Å—Ç–∞–µ–º ID –∫—É—Ä—Å–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    course_id = data.get('course_id')
    user_id = message.from_user.id
    
    # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—É –ª–æ–≥–∏–∫—É, —á—Ç–æ –±—ã–ª–∞ —Ä–∞–Ω—å—à–µ: –∏—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞–≤–∏–º –∑–∞–∫–ª–∞–¥–∫—É
    latest_progress = await db.get_latest_progress_for_course(user_id, course_id)
    next_day, next_module = 1, 1
    if latest_progress:
        last_day, last_module = latest_progress['day'], latest_progress['module']
        next_day, next_module = last_day, last_module + 1
        if next_module > 3:
            next_module = 1
            next_day += 1

    await db.update_user_bookmark(user_id, course_id, next_day, next_module)
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(message, user_id)

# 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤
@router.message(CourseSelection.confirming_choice, F.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞")
async def back_to_course_list(message: Message, state: FSMContext):
    await state.clear()
    courses = await db.get_all_courses()
    await message.answer("–•–æ—Ä–æ—à–æ, –≤–æ—Ç —Å–Ω–æ–≤–∞ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤:", reply_markup=ikb.get_courses_kb(courses))
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫—É—Ä—Å:", reply_markup=ReplyKeyboardRemove())

# 3. –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
@router.message(CourseSelection.confirming_choice, F.text == "ü§î –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
async def learn_more_stub(message: Message):
    await message.answer("–≠—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")


# --- –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é ---
@router.message(F.text == "–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å")
async def change_course(message: Message):
    courses = await db.get_all_courses()
    await message.answer("–ö–∞–∫–æ–π –∫—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å?", reply_markup=ikb.get_courses_kb(courses))

@router.message(F.text == "–í—ã–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å")
async def select_module_entry(message: Message):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_id = message.from_user.id
    bookmark = await db.get_user_bookmark(user_id)
    if not bookmark or not bookmark['current_course_id']:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–æ–¥—É–ª–∏.")
        return
    progress = await db.get_all_completed_modules_for_course(user_id, bookmark['current_course_id'])
    days_kb = ikb.get_days_keyboard(bookmark['current_day'], progress)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥—É–ª–µ–π:", reply_markup=days_kb)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@router.callback_query(F.data.startswith("select_day_"))
async def day_selected(callback: CallbackQuery):
    selected_day = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    bookmark = await db.get_user_bookmark(user_id)
    progress = await db.get_all_completed_modules_for_course(user_id, bookmark['current_course_id'])

    modules_kb = ikb.get_modules_keyboard(selected_day, bookmark, progress)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å {selected_day}. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=modules_kb)
    await callback.answer()
    
@router.callback_query(F.data.startswith("select_module_"))
async def module_selected(callback: CallbackQuery):
    parts = callback.data.split("_")
    day, module = int(parts[2]), int(parts[3])
    user_id = callback.from_user.id
    
    bookmark = await db.get_user_bookmark(user_id)
    course_id = bookmark['current_course_id']
    
    await db.update_user_bookmark(user_id, course_id, day, module)

    await callback.message.delete()
    await callback.answer(f"–ü–µ—Ä–µ—Ö–æ–∂—É –∫ –º–æ–¥—É–ª—é {day}.{module}...")
    
    course_info = await db.get_course_by_id(course_id)
    await callback.message.answer(
        f"üìñ –ö—É—Ä—Å ¬´{course_info['emoji']} {course_info['title']}¬ª\n"
        f"**–î–µ–Ω—å {day}, –ú–æ–¥—É–ª—å {module}**\n\n"
        f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è...",
        parse_mode="Markdown",
        reply_markup=rkb.module_navigation_kb
    )

@router.callback_query(F.data.in_({"day_locked", "module_locked"}))
async def locked_button_pressed(callback: CallbackQuery):
    await callback.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É—Ä–æ–∫–∏.", show_alert=True)

@router.message(F.text.in_({"–ü—Ä–∞–∫—Ç–∏–∫–∏"}))
async def menu_stubs(message: Message):
    await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")