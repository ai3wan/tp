# handlers/menu.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext

import database as db
import keyboards.inline as ikb
import keyboards.reply as rkb
from FSM.states import Onboarding
from handlers.course_flow import show_main_menu

router = Router()

# --- –õ–æ–≥–∏–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è) ---
@router.message(F.text == "‚úÖ –î–∞, –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ç–µ—Å—Ç")
async def start_test_from_onboarding(message: Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ (ID = 1) –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    await db.update_user_bookmark(message.from_user.id, 1, 1, 1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏
    from handlers.assessments.anxiety_test import start_anxiety_test
    await start_anxiety_test(message, state)

@router.message(F.text == "ü§î –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—É—Ä—Å")
async def show_course_info(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –ø–æ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏."""
    await message.answer(
        "üìö **–ö—É—Ä—Å ¬´–†–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é¬ª**\n\n"
        "–≠—Ç–æ—Ç –∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º–∏ –∏ –≤–∫–ª—é—á–∞–µ—Ç:\n\n"
        "‚Ä¢ **14 –¥–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫** ‚Äî –ø–æ 3 –º–æ–¥—É–ª—è –≤ –¥–µ–Ω—å\n"
        "‚Ä¢ **–ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏** —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –º—ã—Å–ª–µ–π\n"
        "‚Ä¢ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥** ‚Äî —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –∫—É—Ä—Å –ø–æ–¥ —Ç–µ–±—è\n"
        "‚Ä¢ **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞** ‚Äî —É–≤–∏–¥–∏—à—å, –∫–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
        "–ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç 5-10 –º–∏–Ω—É—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏.\n\n"
        "–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å?",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞, –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ç–µ—Å—Ç")],
            [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∫—É—Ä—Å –±–µ–∑ —Ç–µ—Å—Ç–∞")]
        ], resize_keyboard=True)
    )

@router.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å –∫—É—Ä—Å –±–µ–∑ —Ç–µ—Å—Ç–∞")
async def start_course_without_test(message: Message):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –∫—É—Ä—Å –±–µ–∑ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ (ID = 1) –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    await db.update_user_bookmark(message.from_user.id, 1, 1, 1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(message, message.from_user.id)

# --- –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ) ---
@router.message(F.text == "üìö –í—ã–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å")
async def select_module_entry(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è –∫—É—Ä—Å–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏."""
    user_id = message.from_user.id
    bookmark = await db.get_user_bookmark(user_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not bookmark or not bookmark['current_course_id']:
        await db.update_user_bookmark(user_id, 1, 1, 1)
        bookmark = await db.get_user_bookmark(user_id)
    
    # –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—è–º
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç –¥–ª—è –∫—É—Ä—Å–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ (ID = 1), –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–π –∑–∞–∫–ª–∞–¥–∫–∏
    initial_assessment = await db.get_initial_assessment_result(user_id, 1)  # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏
    if not initial_assessment:
        await message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—è–º –∫—É—Ä—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É.\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –∫—É—Ä—Å –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å.\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?",
            reply_markup=ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞, –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
                [KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True)
        )
        return
    
    progress = await db.get_all_completed_modules_for_course(user_id, bookmark['current_course_id'])
    days_kb = ikb.get_days_keyboard(bookmark['current_day'], progress)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥—É–ª–µ–π:", reply_markup=days_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–æ–¥—É–ª–µ–π
@router.message(F.text == "‚úÖ –î–∞, –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def start_test_from_blocked_modules(message: Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—è–º."""
    from handlers.assessments.anxiety_test import start_anxiety_test
    await start_anxiety_test(message, state)

@router.message(F.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_from_blocked_modules(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–æ–¥—É–ª–µ–π."""
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(message, message.from_user.id)

@router.message(F.text == "üôè –ü—Ä–∞–∫—Ç–∏–∫–∏")
async def show_practices(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫."""
    await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@router.callback_query(F.data.startswith("select_day_"))
async def day_selected(callback: CallbackQuery):
    selected_day = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    bookmark = await db.get_user_bookmark(user_id)
    progress = await db.get_all_completed_modules_for_course(user_id, bookmark['current_course_id'])

    modules_kb = ikb.get_modules_keyboard(selected_day, bookmark, progress)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å {selected_day}. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=modules_kb)
    await callback.answer()
    
@router.callback_query(F.data.startswith("select_module_"))
async def module_selected(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    day, module = int(parts[2]), int(parts[3])
    user_id = callback.from_user.id
    
    bookmark = await db.get_user_bookmark(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–ª–∞–¥–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not bookmark:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    
    course_id = bookmark['current_course_id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.update_user_bookmark(user_id, course_id, day, module)

    await callback.message.delete()
    await callback.answer(f"–ü–µ—Ä–µ—Ö–æ–∂—É –∫ –º–æ–¥—É–ª—é {day}.{module}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–∫–ª–∞–¥–∫—É
    updated_bookmark = await db.get_user_bookmark(user_id)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
    from handlers.course_flow import start_module
    await start_module(callback.message, state)

@router.callback_query(F.data.in_({"day_locked", "module_locked"}))
async def locked_button_pressed(callback: CallbackQuery):
    await callback.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É—Ä–æ–∫–∏.", show_alert=True)

@router.message(F.text.in_({"–ü—Ä–∞–∫—Ç–∏–∫–∏"}))
async def menu_stubs(message: Message):
    await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")