# handlers/modules/day_1_module_2.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()

class Day1Module2States(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –î–Ω—è 1, –ú–æ–¥—É–ª—è 2."""
    introduction = State()
    practice = State()
    reflection = State()
    completion = State()

def get_day_1_module_2_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –î–Ω—è 1, –ú–æ–¥—É–ª—è 2."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–Ω—è–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")],
            [KeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")],
            [KeyboardButton(text="üè† –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

@router.message(F.text == "‚ñ∂Ô∏è –î–µ–Ω—å 1, –ú–æ–¥—É–ª—å 2")
async def start_day_1_module_2(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –î–µ–Ω—å 1, –ú–æ–¥—É–ª—å 2."""
    await state.set_state(Day1Module2States.introduction)
    await message.answer(
        "üå± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–µ–Ω—å 1, –ú–æ–¥—É–ª—å 2!\n\n"
        "**–¢–µ–º–∞: –¢–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è**\n\n"
        "–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –º—ã –∏–∑—É—á–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è, "
        "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –±—ã—Å—Ç—Ä–æ —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
        reply_markup=get_day_1_module_2_keyboard()
    )

@router.message(Day1Module2States.introduction, F.text == "‚úÖ –ü–æ–Ω—è–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
async def continue_day_1_module_2(message: Message, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º–æ–¥—É–ª—å –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è."""
    await state.set_state(Day1Module2States.practice)
    await message.answer(
        "üéØ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –∏–∑—É—á–∏–º —Ç–µ—Ö–Ω–∏–∫—É \"4-7-8\".\n\n"
        "**–¢–µ—Ö–Ω–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è 4-7-8:**\n\n"
        "1. –í–¥–æ—Ö–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–æ—Å –Ω–∞ 4 —Å—á–µ—Ç–∞\n"
        "2. –ó–∞–¥–µ—Ä–∂–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ 7 —Å—á–µ—Ç–æ–≤\n"
        "3. –í—ã–¥–æ—Ö–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ —Ä–æ—Ç –Ω–∞ 8 —Å—á–µ—Ç–æ–≤\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
        reply_markup=get_day_1_module_2_keyboard()
    )

@router.message(Day1Module2States.practice, F.text == "‚úÖ –ü–æ–Ω—è–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
async def complete_day_1_module_2(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–æ–¥—É–ª—å."""
    await state.set_state(Day1Module2States.completion)
    await message.answer(
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –î–µ–Ω—å 1, –ú–æ–¥—É–ª—å 2.\n\n"
        "**–ß—Ç–æ –≤—ã –∏–∑—É—á–∏–ª–∏:**\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è 4-7-8\n"
        "‚Ä¢ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—ã—Ö–∞–Ω–∏–µ –¥–ª—è —É—Å–ø–æ–∫–æ–µ–Ω–∏—è\n"
        "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏\n\n"
        "–û—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–æ–¥—É–ª—é?",
        reply_markup=get_day_1_module_2_keyboard()
    )

@router.message(F.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
async def repeat_day_1_module_2(message: Message, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å."""
    await start_day_1_module_2(message, state)

@router.message(F.text == "üè† –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_from_module(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    from handlers.course_flow import show_main_menu
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True))
    await show_main_menu(message, message.from_user.id)
