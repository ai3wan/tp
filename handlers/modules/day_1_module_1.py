# handlers/modules/day_1_module_1.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()

class Day1Module1States(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –î–Ω—è 1, –ú–æ–¥—É–ª—è 1."""
    introduction = State()
    practice = State()
    reflection = State()
    completion = State()

def get_day_1_module_1_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –î–Ω—è 1, –ú–æ–¥—É–ª—è 1."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–Ω—è–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")],
            [KeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")],
            [KeyboardButton(text="üè† –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

@router.message(F.text == "‚ñ∂Ô∏è –î–µ–Ω—å 1, –ú–æ–¥—É–ª—å 1")
async def start_day_1_module_1(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –î–µ–Ω—å 1, –ú–æ–¥—É–ª—å 1."""
    await state.set_state(Day1Module1States.introduction)
    await message.answer(
        "üåÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–µ–Ω—å 1, –ú–æ–¥—É–ª—å 1!\n\n"
        "**–¢–µ–º–∞: –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏**\n\n"
        "–°–µ–≥–æ–¥–Ω—è –º—ã –∏–∑—É—á–∏–º –æ—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é. "
        "–í—ã —É–∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –∫–∞–∫ –æ–Ω–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è "
        "–∏ –∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç —Å –Ω–µ–π —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
        reply_markup=get_day_1_module_1_keyboard()
    )

@router.message(Day1Module1States.introduction, F.text == "‚úÖ –ü–æ–Ω—è–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
async def continue_day_1_module_1(message: Message, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º–æ–¥—É–ª—å –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è."""
    await state.set_state(Day1Module1States.practice)
    await message.answer(
        "üéØ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ.\n\n"
        "**–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:**\n\n"
        "1. –ù–∞–π–¥–∏—Ç–µ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ\n"
        "2. –°—è–¥—å—Ç–µ —É–¥–æ–±–Ω–æ\n"
        "3. –ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞\n"
        "4. –°–¥–µ–ª–∞–π—Ç–µ 3 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞\n\n"
        "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è?",
        reply_markup=get_day_1_module_1_keyboard()
    )

@router.message(Day1Module1States.practice, F.text == "‚úÖ –ü–æ–Ω—è–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
async def complete_day_1_module_1(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–æ–¥—É–ª—å."""
    await state.set_state(Day1Module1States.completion)
    await message.answer(
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –î–µ–Ω—å 1, –ú–æ–¥—É–ª—å 1.\n\n"
        "**–ß—Ç–æ –≤—ã –∏–∑—É—á–∏–ª–∏:**\n"
        "‚Ä¢ –û—Å–Ω–æ–≤—ã –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏–∫—É —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è\n\n"
        "–û—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–æ–¥—É–ª—é?",
        reply_markup=get_day_1_module_1_keyboard()
    )

@router.message(Day1Module1States.completion, F.text == "‚úÖ –ü–æ–Ω—è–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
async def finish_day_1_module_1(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–æ–¥—É–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É."""
    from handlers.course_flow import complete_module
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è
    await complete_module(message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–¥—É–ª—è

@router.message(F.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
async def repeat_day_1_module_1(message: Message, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å."""
    await start_day_1_module_1(message, state)

@router.message(F.text == "üè† –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_from_module(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    import database as db
    import keyboards.reply as kb
    
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True))
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–ª–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    bookmark = await db.get_user_bookmark(user_id)
    
    if not bookmark or not bookmark['current_course_id']:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_button_text = f"‚ñ∂Ô∏è –î–µ–Ω—å {bookmark['current_day']}, –ú–æ–¥—É–ª—å {bookmark['current_module']}"
    
    main_menu_kb = kb.ReplyKeyboardMarkup(
        keyboard=[
            [kb.KeyboardButton(text=main_button_text), kb.KeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å")],
            [kb.KeyboardButton(text="üôè –ü—Ä–∞–∫—Ç–∏–∫–∏"), kb.KeyboardButton(text="üôç –ü—Ä–æ—Ñ–∏–ª—å")]
        ],
        resize_keyboard=True
    )
    await message.answer(reply_markup=main_menu_kb)
