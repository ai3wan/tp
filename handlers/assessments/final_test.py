# handlers/assessments/final_test.py

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

import database as db
from handlers.course_flow import show_main_menu

# –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
router = Router()

# FSM-–≥—Ä—É–ø–ø–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
class FinalTest(StatesGroup):
    intro = State()
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()
    q9 = State()
    q10 = State()
    q11 = State()
    q12 = State()
    q13 = State()
    q14 = State()
    q15 = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ anxiety_test.py)
ANSWER_SCORES = {
    # 0 –±–∞–ª–ª–æ–≤
    "üå§ –ù–∏–∫–æ–≥–¥–∞": 0, "üåô –õ–µ–≥–∫–æ –∑–∞—Å—ã–ø–∞—é –∏ —Å–ø–ª—é —Å–ø–æ–∫–æ–π–Ω–æ": 0, "üåø –ù–∏–∫–æ–≥–¥–∞": 0, "üåû –†–µ–¥–∫–æ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞": 0, "‚ùå –ù–∏–∫–æ–≥–¥–∞": 0, "üçÄ –†–µ–¥–∫–æ": 0, "üèÜ –õ–µ–≥–∫–æ": 0, "üßò –°–ø–æ–∫–æ–π–Ω–æ, –∏—â—É —Ä–µ—à–µ–Ω–∏–µ": 0, "üü¢ –†–µ–¥–∫–æ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞": 0, "üü¢ –†–µ–¥–∫–æ": 0, "üåû –ù–∏–∫–æ–≥–¥–∞": 0, "ü•á –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–≤–µ—Ä–µ–Ω(–∞)": 0,
    # 1 –±–∞–ª–ª
    "üå¶ –ò–Ω–æ–≥–¥–∞, –Ω–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç": 1, "üòå –ò–Ω–æ–≥–¥–∞ –¥–æ–ª–≥–æ –∑–∞—Å—ã–ø–∞—é –∏–ª–∏ –ø—Ä–æ—Å—ã–ø–∞—é—Å—å –Ω–æ—á—å—é": 1, "üçÉ –ò–Ω–æ–≥–¥–∞, –Ω–æ –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—É—Å–∫–∞–µ—Ç": 1, "üå§ –ò–Ω–æ–≥–¥–∞, –Ω–æ –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—é—Å—å": 1, "üå¨ –ò–Ω–æ–≥–¥–∞, –Ω–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç": 1, "üåø –ò–Ω–æ–≥–¥–∞": 1, "üéà –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–ª–µ–∫–∞—é—Å—å": 1, "üôÇ –ù–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–∂–∏–≤–∞—é, –Ω–æ –±—ã—Å—Ç—Ä–æ –¥–µ–π—Å—Ç–≤—É—é": 1, "üü° –ò–Ω–æ–≥–¥–∞": 1, "üå§ –ò–Ω–æ–≥–¥–∞": 1, "ü•à –í –æ—Å–Ω–æ–≤–Ω–æ–º —É–≤–µ—Ä–µ–Ω(–∞)": 1, "üçÉ –ò–Ω–æ–≥–¥–∞": 1,
    # 2 –±–∞–ª–ª–∞
    "üåß –ß–∞—Å—Ç–æ, –Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç –∂–∏—Ç—å": 2, "üòï –ó–∞—Å—ã–ø–∞—é —Å —Ç—Ä—É–¥–æ–º, —Å–æ–Ω –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π": 2, "üåæ –ß–∞—Å—Ç–æ, –Ω–æ —Ç–µ—Ä–ø–∏–º–æ": 2, "üåß –ß–∞—Å—Ç–æ, –∏ –æ–Ω–∏ –∫—Ä—É—Ç—è—Ç—Å—è –≤ –≥–æ–ª–æ–≤–µ": 2, "üíì –ß–∞—Å—Ç–æ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ": 2, "üî• –ß–∞—Å—Ç–æ": 2, "üé≠ –°–∏–ª—å–Ω–æ –æ—Ç–≤–ª–µ–∫–∞—é—Å—å": 2, "üò∞ –°–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∂–∏–≤–∞—é, —Å–ª–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å": 2, "üü† –ß–∞—Å—Ç–æ": 2, "üå¶ –ß–∞—Å—Ç–æ": 2, "ü•â –ù–µ –≤—Å–µ–≥–¥–∞ —É–≤–µ—Ä–µ–Ω(–∞)": 2, "üåæ –ß–∞—Å—Ç–æ": 2, "üåß –ß–∞—Å—Ç–æ": 2,
    # 3 –±–∞–ª–ª–∞
    "‚õà –ü–æ—á—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –º–µ—à–∞–µ—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è": 3, "üò£ –ü–æ—á—Ç–∏ –∫–∞–∂–¥—É—é –Ω–æ—á—å –º—É—á–∞—é—Å—å –æ—Ç –ø–ª–æ—Ö–æ–≥–æ —Å–Ω–∞": 3, "ü™® –ü–æ—Å—Ç–æ—è–Ω–Ω–æ, —ç—Ç–æ –º–µ—à–∞–µ—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è": 3, "‚õà –ü–æ—á—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –º–µ—à–∞–µ—Ç –∂–∏—Ç—å": 3, "üí¢ –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ": 3, "üå™ –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞": 3, "üö´ –ù–µ –º–æ–≥—É —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è —Å–æ–≤—Å–µ–º": 3, "üò± –ü–∞–Ω–∏–∫–∞ –∏–ª–∏ —Å—Ç—É–ø–æ—Ä": 3, "üî¥ –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞": 3, "üå™ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ": 3, "ü™® –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞": 3, "üö´ –ü–æ—á—Ç–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω(–∞)": 3, "‚õà –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞": 3
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
def is_valid_answer(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –∏–∑ –∫–Ω–æ–ø–æ–∫."""
    return text in ANSWER_SCORES

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ anxiety_test.py)
q1_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üå§ –ù–∏–∫–æ–≥–¥–∞", "üå¶ –ò–Ω–æ–≥–¥–∞, –Ω–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç", "üåß –ß–∞—Å—Ç–æ, –Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç –∂–∏—Ç—å", "‚õà –ü–æ—á—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –º–µ—à–∞–µ—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è"]], resize_keyboard=True)
q2_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üåô –õ–µ–≥–∫–æ –∑–∞—Å—ã–ø–∞—é –∏ —Å–ø–ª—é —Å–ø–æ–∫–æ–π–Ω–æ", "üòå –ò–Ω–æ–≥–¥–∞ –¥–æ–ª–≥–æ –∑–∞—Å—ã–ø–∞—é –∏–ª–∏ –ø—Ä–æ—Å—ã–ø–∞—é—Å—å –Ω–æ—á—å—é", "üòï –ó–∞—Å—ã–ø–∞—é —Å —Ç—Ä—É–¥–æ–º, —Å–æ–Ω –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π", "üò£ –ü–æ—á—Ç–∏ –∫–∞–∂–¥—É—é –Ω–æ—á—å –º—É—á–∞—é—Å—å –æ—Ç –ø–ª–æ—Ö–æ–≥–æ —Å–Ω–∞"]], resize_keyboard=True)
q3_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üåø –ù–∏–∫–æ–≥–¥–∞", "üçÉ –ò–Ω–æ–≥–¥–∞, –Ω–æ –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—É—Å–∫–∞–µ—Ç", "üåæ –ß–∞—Å—Ç–æ, –Ω–æ —Ç–µ—Ä–ø–∏–º–æ", "ü™® –ü–æ—Å—Ç–æ—è–Ω–Ω–æ, —ç—Ç–æ –º–µ—à–∞–µ—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è"]], resize_keyboard=True)
q4_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üåû –†–µ–¥–∫–æ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞", "üå§ –ò–Ω–æ–≥–¥–∞, –Ω–æ –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—é—Å—å", "üåß –ß–∞—Å—Ç–æ, –∏ –æ–Ω–∏ –∫—Ä—É—Ç—è—Ç—Å—è –≤ –≥–æ–ª–æ–≤–µ", "‚õà –ü–æ—á—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –º–µ—à–∞–µ—Ç –∂–∏—Ç—å"]], resize_keyboard=True)
q5_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["‚ùå –ù–∏–∫–æ–≥–¥–∞", "üå¨ –ò–Ω–æ–≥–¥–∞, –Ω–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç", "üíì –ß–∞—Å—Ç–æ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ", "üí¢ –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ"]], resize_keyboard=True)
q6_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üçÄ –†–µ–¥–∫–æ", "üåø –ò–Ω–æ–≥–¥–∞", "üî• –ß–∞—Å—Ç–æ", "üå™ –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞"]], resize_keyboard=True)
q7_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üèÜ –õ–µ–≥–∫–æ", "üéà –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–ª–µ–∫–∞—é—Å—å", "üé≠ –°–∏–ª—å–Ω–æ –æ—Ç–≤–ª–µ–∫–∞—é—Å—å", "üö´ –ù–µ –º–æ–≥—É —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è —Å–æ–≤—Å–µ–º"]], resize_keyboard=True)
q8_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üßò –°–ø–æ–∫–æ–π–Ω–æ, –∏—â—É —Ä–µ—à–µ–Ω–∏–µ", "üôÇ –ù–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–∂–∏–≤–∞—é, –Ω–æ –±—ã—Å—Ç—Ä–æ –¥–µ–π—Å—Ç–≤—É—é", "üò∞ –°–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∂–∏–≤–∞—é, —Å–ª–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å", "üò± –ü–∞–Ω–∏–∫–∞ –∏–ª–∏ —Å—Ç—É–ø–æ—Ä"]], resize_keyboard=True)
q9_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üü¢ –†–µ–¥–∫–æ", "üü° –ò–Ω–æ–≥–¥–∞", "üü† –ß–∞—Å—Ç–æ", "üî¥ –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞"]], resize_keyboard=True)
q10_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üü¢ –†–µ–¥–∫–æ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞", "üü° –ò–Ω–æ–≥–¥–∞", "üü† –ß–∞—Å—Ç–æ", "üî¥ –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞"]], resize_keyboard=True)
q11_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üåû –ù–∏–∫–æ–≥–¥–∞", "üå§ –ò–Ω–æ–≥–¥–∞", "üå¶ –ß–∞—Å—Ç–æ", "üå™ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ"]], resize_keyboard=True)
q12_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["ü•á –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–≤–µ—Ä–µ–Ω(–∞)", "ü•à –í –æ—Å–Ω–æ–≤–Ω–æ–º —É–≤–µ—Ä–µ–Ω(–∞)", "ü•â –ù–µ –≤—Å–µ–≥–¥–∞ —É–≤–µ—Ä–µ–Ω(–∞)", "üö´ –ü–æ—á—Ç–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω(–∞)"]], resize_keyboard=True)
q13_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["‚ùå –ù–∏–∫–æ–≥–¥–∞", "üå§ –ò–Ω–æ–≥–¥–∞", "üåß –ß–∞—Å—Ç–æ", "‚õà –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞"]], resize_keyboard=True)
q14_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=t)] for t in ["üü¢ –†–µ–¥–∫–æ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞", "üü° –ò–Ω–æ–≥–¥–∞", "üü† –ß–∞—Å—Ç–æ", "üî¥ –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞"]], resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
async def process_answer(message: Message, state: FSMContext, next_state, question_text: str, next_kb, current_kb):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É."""
    if not is_valid_answer(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup=current_kb)
        return
    
    data = await state.get_data()
    score = data.get('score', 0) + ANSWER_SCORES.get(message.text, 0)
    await state.update_data(score=score)
    
    await state.set_state(next_state)
    await message.answer(question_text, reply_markup=next_kb)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
async def start_final_test(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç."""
    await state.set_state(FinalTest.intro)
    await message.answer(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –∫—É—Ä—Å–∞! ü•≥\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ–≤—Ç–æ—Ä–∏–º —Ç–æ—Ç –∂–µ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞–≥–ª—è–¥–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.\n\n"
        "–û—Ç–≤–µ—á–∞–π —Ç–∞–∫ –∂–µ —á–µ—Å—Ç–Ω–æ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.\n\n"
        "–ì–æ—Ç–æ–≤(–∞) —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã? üíô",
        reply_markup=ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="–í–ø–µ—Ä–µ–¥! üíô")],
            [KeyboardButton(text="–ü–æ–∫–∞ –Ω–µ —Ö–æ—á—É")]
        ], resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
@router.message(
    StateFilter(FinalTest.intro),
    F.text == "–ü–æ–∫–∞ –Ω–µ —Ö–æ—á—É"
)
async def abort_final_test(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(message, message.from_user.id)

@router.message(
    StateFilter(FinalTest.intro),
    F.text == "–í–ø–µ—Ä–µ–¥! üíô"
)
async def start_final_questions(message: Message, state: FSMContext):
    await state.set_state(FinalTest.q1)
    await message.answer(
        "–ö–∞–∫ —á–∞—Å—Ç–æ —É —Ç–µ–±—è –±—ã–≤–∞—é—Ç —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –º—ã—Å–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? ü§î",
        reply_markup=q1_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(FinalTest.q1)
async def final_q1(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q2, "–ö–∞–∫ —Ç—ã —Å–ø–∏—à—å? üò¥", q2_kb, q1_kb)

@router.message(FinalTest.q2)
async def final_q2(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q3, "–ë—ã–≤–∞–µ—Ç –ª–∏ —É —Ç–µ–±—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ (–ø–ª–µ—á–∏, —à–µ—è, —á–µ–ª—é—Å—Ç–∏) –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã? üíÜ", q3_kb, q2_kb)

@router.message(FinalTest.q3)
async def final_q3(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q4, "–ö–∞–∫ —á–∞—Å—Ç–æ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –º—ã—Å–ª–∏ –æ –±—É–¥—É—â–µ–º? üîÆ", q4_kb, q3_kb)

@router.message(FinalTest.q4)
async def final_q4(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q5, "–ó–∞–º–µ—á–∞–µ—à—å –ª–∏ —Ç—ã —É—á–∞—â—ë–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ, –¥—Ä–æ–∂—å –∏–ª–∏ –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å, –∫–æ–≥–¥–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ? ‚ù§Ô∏è‚Äçüî•", q5_kb, q4_kb)

@router.message(FinalTest.q5)
async def final_q5(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q6, "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –≤—Å–ø—ã—à–∫–∏ –≥–Ω–µ–≤–∞ –±–µ–∑ —Å–µ—Ä—å—ë–∑–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã? üò†", q6_kb, q5_kb)

@router.message(FinalTest.q6)
async def final_q6(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q7, "–ú–æ–∂–µ—à—å –ª–∏ —Ç—ã —Å–ø–æ–∫–æ–π–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–µ, –∫–æ–≥–¥–∞ –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–µ—Å—Å? üéØ", q7_kb, q6_kb)

@router.message(FinalTest.q7)
async def final_q7(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q8, "–ö–∞–∫ —Ç—ã —Ä–µ–∞–≥–∏—Ä—É–µ—à—å –Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? üöß", q8_kb, q7_kb)

@router.message(FinalTest.q8)
async def final_q8(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q9, "–ß–∞—Å—Ç–æ –ª–∏ —Ç—ã –∏–∑–±–µ–≥–∞–µ—à—å —Å–∏—Ç—É–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å —Å—Ç—Ä–µ—Å—Å –∏–ª–∏ –≤–æ–ª–Ω–µ–Ω–∏–µ? üõë", q9_kb, q8_kb)

@router.message(FinalTest.q9)
async def final_q9(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q10, "–ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã, —á—Ç–æ —Ç—Ä–µ–≤–æ–≥–∞ –º–µ—à–∞–µ—Ç —Ç–µ–±–µ –æ—Ç–¥—ã—Ö–∞—Ç—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∂–∏–∑–Ω—å—é? üå¥", q10_kb, q9_kb)

@router.message(FinalTest.q10)
async def final_q10(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q11, "–ó–∞–º–µ—á–∞–µ—à—å –ª–∏ —Ç—ã, —á—Ç–æ —Ç—Ä–µ–≤–æ–≥–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ (–≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏, –∂–µ–ª—É–¥–æ–∫, —É—Å—Ç–∞–ª–æ—Å—Ç—å)? üíä", q11_kb, q10_kb)

@router.message(FinalTest.q11)
async def final_q11(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q12, "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —É–≤–µ—Ä–µ–Ω(–∞) –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏? üí™", q12_kb, q11_kb)

@router.message(FinalTest.q12)
async def final_q12(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q13, "–ö–∞–∫ —á–∞—Å—Ç–æ —É —Ç–µ–±—è –±—ã–≤–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –¥—ã—Ö–∞–Ω–∏–µ–º –∏–ª–∏ –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ \"–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–∑–¥—É—Ö–∞\" –ø—Ä–∏ —Ç—Ä–µ–≤–æ–≥–µ? üå¨", q13_kb, q12_kb)

@router.message(FinalTest.q13)
async def final_q13(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q14, "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö, —á—Ç–æ–±—ã —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è? ü§ù", q14_kb, q13_kb)

@router.message(FinalTest.q14)
async def final_q14(message: Message, state: FSMContext):
    await process_answer(message, state, FinalTest.q15, "–û—Ü–µ–Ω–∏ —Å–≤–æ—é –æ–±—â—É—é —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10, –≥–¥–µ 0 ‚Äî —Å–æ–≤—Å–µ–º –Ω–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ, –∞ 10 ‚Äî –æ—á–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ.", None, q14_kb)
    await state.set_state(FinalTest.q15)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
@router.message(FinalTest.q15, F.text.regexp(r'^\d+$'))
async def final_test_complete(message: Message, state: FSMContext):
    self_assessment = int(message.text)
    if not (0 <= self_assessment <= 10):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
        return

    data = await state.get_data()
    final_score = data.get('score', 0)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    bookmark = await db.get_user_bookmark(message.from_user.id)
    course_id = bookmark['current_course_id'] if bookmark and bookmark['current_course_id'] else 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    all_results = await db.get_all_assessment_results(message.from_user.id, course_id)
    initial_score = all_results.get('initial', {}).get('score', 0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    await db.save_assessment_result(message.from_user.id, course_id, 'final', final_score, self_assessment)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    difference = final_score - initial_score
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω–∏—Ü—ã
    if difference <= -10:
        result_message = "‚ú® –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å —Å–Ω–∏–∑–∏–ª–∞—Å—å –∑–∞–º–µ—Ç–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî –æ–Ω–∏ —É–∂–µ –ø—Ä–∏–Ω–æ—Å—è—Ç –ø–ª–æ–¥—ã."
    elif -9 <= difference <= -4:
        result_message = "üí´ –ï—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥. –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —É—Å–∏–ª–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç."
    elif -3 <= difference <= 3:
        result_message = "üåø –ó–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å."
    elif 4 <= difference <= 9:
        result_message = "‚öñÔ∏è –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∞–∫—Ç–∏–∫–∞–º –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–∞–ª–∞–Ω—Å."
    else:  # difference >= 10
        result_message = "‚ù§Ô∏è –í–∏–¥–Ω–æ, —á—Ç–æ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å —É—Å–∏–ª–∏–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏, –∞ –µ—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ –º–µ—à–∞–µ—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ ‚Äî —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
    
    await message.answer(
        f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è**\n\n"
        f"–ü—É–ª—å—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ –∫—É—Ä—Å–∞: {initial_score}/42 –±–∞–ª–ª–æ–≤\n"
        f"–ü—É–ª—å—Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞: {final_score}/42 –±–∞–ª–ª–æ–≤\n"
        f"–†–∞–∑–Ω–∏—Ü–∞: {difference:+d} –±–∞–ª–ª–æ–≤\n\n"
        f"{result_message}"
    )
    
    await state.clear()
    await show_main_menu(message, message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
@router.message(FinalTest.q15)
async def invalid_final_q15_answer(message: Message):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 10 –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–∞—à–µ–π —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 5"
    )

