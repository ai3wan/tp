from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_courses_kb(courses: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫—É—Ä—Å–æ–≤."""
    buttons = []
    for course in courses:
        # course - —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ (id, title, emoji)
        button = InlineKeyboardButton(
            text=f"{course[2]} {course[1]}",
            callback_data=f"select_course_{course[0]}" # –ù–∞–ø—Ä–∏–º–µ—Ä, select_course_1
        )
        buttons.append([button]) # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_days_keyboard(current_day: int, progress: set) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 14 –¥–Ω—è–º–∏ –∫—É—Ä—Å–∞, –æ—Ç–º–µ—á–∞—è –∏—Ö —Å—Ç–∞—Ç—É—Å—ã.
    `progress` - —ç—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π {(–¥–µ–Ω—å, –º–æ–¥—É–ª—å), ...}
    """
    buttons = []
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–Ω–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–π–¥–µ–Ω—ã (–≤—Å–µ 3 –º–æ–¥—É–ª—è)
    completed_days = set()
    day_counts = {}
    for day, module in progress:
        day_counts[day] = day_counts.get(day, 0) + 1
    for day, count in day_counts.items():
        if count == 3:
            completed_days.add(day)
            
    # –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –¥–µ–Ω—å
    last_completed_day = max(completed_days) if completed_days else 0

    for day in range(1, 15):
        status_icon = ""
        callback_data = f"select_day_{day}"

        if day == current_day:
            status_icon = "üìç" # –¢–µ–∫—É—â–∏–π
        elif day in completed_days:
            status_icon = "‚úÖ" # –ü—Ä–æ–π–¥–µ–Ω
        elif day <= max(last_completed_day + 1, current_day):
            status_icon = "‚ñ∂Ô∏è" # –î–æ—Å—Ç—É–ø–Ω—ã–π (–¥–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ + 1)
        else:
            status_icon = "üîí" # –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            callback_data = "day_locked"

        buttons.append(InlineKeyboardButton(text=f"{status_icon} –î–µ–Ω—å {day}", callback_data=callback_data))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 2 —Å—Ç–æ–ª–±—Ü–∞–º–∏
    keyboard = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_modules_keyboard(selected_day: int, bookmark, progress: set) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 3 –º–æ–¥—É–ª—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è."""
    buttons = []
    current_day, current_module = bookmark['current_day'], bookmark['current_module']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–Ω–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–π–¥–µ–Ω—ã (–≤—Å–µ 3 –º–æ–¥—É–ª—è)
    completed_days = set()
    day_counts = {}
    for day, module in progress:
        day_counts[day] = day_counts.get(day, 0) + 1
    for day, count in day_counts.items():
        if count == 3:
            completed_days.add(day)
    
    # –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –¥–µ–Ω—å
    last_completed_day = max(completed_days) if completed_days else 0

    for module in range(1, 4):
        status_icon = ""
        callback_data = f"select_module_{selected_day}_{module}"

        is_completed = (selected_day, module) in progress
        is_current = (selected_day == current_day and module == current_module)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è
        # –ú–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω, –µ—Å–ª–∏:
        # 1. –û–Ω –ø—Ä–æ–π–¥–µ–Ω
        # 2. –û–Ω —Ç–µ–∫—É—â–∏–π
        # 3. –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–¥—É–ª—å –≤ —ç—Ç–æ–º –¥–Ω–µ –ø—Ä–æ–π–¥–µ–Ω
        # 4. –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–µ–Ω (–¥–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ + 1)
        is_day_accessible = selected_day <= max(last_completed_day + 1, current_day)
        is_unlocked = False
        
        if is_day_accessible:
            if module == 1 or (selected_day, module - 1) in progress:
                is_unlocked = True

        if is_current:
            status_icon = "üìç"
        elif is_completed:
            status_icon = "‚úÖ"
        elif is_unlocked:
            status_icon = "‚ñ∂Ô∏è"
        else:
            status_icon = "üîí"
            callback_data = "module_locked"

        buttons.append(InlineKeyboardButton(text=f"{status_icon} –ú–æ–¥—É–ª—å {module}", callback_data=callback_data))

    return InlineKeyboardMarkup(inline_keyboard=[buttons])
    
def get_reset_courses_kb(courses: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫—É—Ä—Å–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞."""
    buttons = []
    for course in courses:
        button = InlineKeyboardButton(
            text=f"{course['emoji']} {course['title']}",
            callback_data=f"reset_course_{course['id']}" # –î—Ä—É–≥–æ–π callback_data!
        )
        buttons.append([button])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirm_reset_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞."""
    buttons = [
        InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º", callback_data="confirm_reset"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ", callback_data="cancel_reset")
    ]
    return InlineKeyboardMarkup(inline_keyboard=[buttons])